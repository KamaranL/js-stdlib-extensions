name: cicd

# NEEDS:
# - secrets.SSH_ID
# - secrets.SSH_ID_PUB
# - secrets.SSH_ALLOWED_SIGNERS
# - secrets.NPM_TOKEN

on:
  push:
    branches-ignore: main
    # test > update manifests
  pull_request:
    branches: main
    # test > update manifests > tag > release > npm package registry
  workflow_dispatch:
    # test > update manifests > tag > pre-release > npm package registry

concurrency: ${{ github.workflow }}

defaults:
  run:
    shell: bash

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - run: curl -o 'GitVersion.yml' 'https://gist.githubusercontent.com/KamaranL/9e5c6d02123d4ef984a676e57602a4ef/raw/ContinuousDeployment.yml'
        working-directory: ${{ runner.temp }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - run: npm ci

      - run: npm run test

      - run: |
          SSH="${{ runner.temp }}/ssh"
          mkdir -p $SSH
          echo -e "${{ secrets.SSH_ID }}" >"$SSH/id"
          echo -e "${{ secrets.SSH_ID_PUB }}" >"$SSH/id.pub"
          echo -e "${{ secrets.SSH_ALLOWED_SIGNERS }}" >"$SSH/allowed_signers"
          chmod 0600 "$SSH/id"

          git config --global user.name "GitHub Actions"
          git config --global user.email "lossy.typist.0i@icloud.com"
          git config --global user.signingkey "$SSH/id.pub"
          git config --global gpg.format "ssh"
          git config --global gpg.ssh.allowedsignersfile "$SSH/allowed_signers"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          git config --global push.followtags true
        name: Set up Git

      - uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: '${{ runner.temp }}/GitVersion.yml'

      - run: |
          [ "${{ github.event_name }}" == workflow_dispatch -a "${{ github.ref_name }}" != main ] && echo "CI_CREATE_TAG=true" >>"$GITHUB_ENV"

          echo "CI_VERSION=${{ env.GITVERSION_FULLSEMVER }}" >>"$GITHUB_ENV"
          echo "CI_BRANCH=${{ github.ref_name }}" >>"$GITHUB_ENV"

          if [ "${{ github.event_name }}" == pull_request -a "${{ github.base_ref }}" == main -a "${{ github.head_ref }}" == dev ]; then
            echo "CI_VERSION=${{ env.GITVERSION_MAJORMINORPATCH }}" >>"$GITHUB_ENV"
            echo "CI_BRANCH=${{ github.head_ref }}" >>"$GITHUB_ENV"
            echo "CI_CREATE_TAG=true" >>"$GITHUB_ENV"

            gh release view v1.0.0 >/dev/null 2>&1 || echo "CI_VERSION=1.0.0" >>"$GITHUB_ENV"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Set CI_ vars

      - run: |
          echo ${{ env.CI_VERSION }} >VERSION.txt
          npm version --quiet --allow-same-version --no-commit-hooks --no-git-tag-version ${{ env.CI_VERSION }}
        name: Update manifests

      - run: |
          git commit -a --amend --no-edit --date=now --trailer "skip-checks: true"

          [ ${{ env.CI_CREATE_TAG }} ] && git tag -a v${{ env.CI_VERSION }} -m v${{ env.CI_VERSION }} $(git rev-parse HEAD) && echo "CI_CREATE_RELEASE=true" >>"$GITHUB_ENV"

          git push origin $(git rev-parse HEAD):${{ env.CI_BRANCH }} --force-with-lease
        name: Commit back to source

      - run: gh release create v${{ env.CI_VERSION }} --generate-notes --verify-tag && echo "CI_CD=true" >>"$GITHUB_OUTPUT" && echo "CI_TAG=v${{ env.CI_VERSION }}" >>"$GITHUB_OUTPUT"
        id: release
        if: env.CI_CREATE_RELEASE
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      cd: ${{ steps.release.outputs.CI_CD }}
      tag: ${{ steps.release.outputs.CI_TAG }}

  cd:
    needs: ci
    if: needs.ci.outputs.cd
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          persist-credentials: true
          ref: ${{ needs.ci.outputs.tag }}

      - run: npm ci

      - run: npm run compile

      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
